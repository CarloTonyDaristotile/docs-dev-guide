---
title: Deploying an Application
owner: CAPI
---

**Purpose**: This topic describes how developers deploy applications to Cloud Foundry.

**Policy**: To successfully deploy an application to Cloud Foundry, developers must ensure their applications are cloud-ready and configure any necessary deployment options.

##<a id='prepare'></a>Prepare to Deploy Your Application

###<a id="deployment-process"></a>Understand the Deployment Process

The following table describes what Cloud Foundry does when a developer deploys an application. 

<table>
	<tr>
		<th>Stage</th>
		<th>Cloud Foundry...</th>
	</tr>
	<tr>
		<td>1</td>
		<td>uploads and stores application files.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>examines and stores application metadata.</td>
	</tr>
	<tr>
		<td>3</td>
		<td>creates a droplet for the application.</td>
	</tr>
	<tr>
		<td>4</td>
		<td>selects an appropriate Diego <a href="../../concepts/architecture/index.html#diego-cell">cell</a> to run the <a href="#droplet">droplet</a>.</td>
	<tr>
		<td>5</td>
		<td>starts the application.</td>
	</tr>
</table>

For more information about the deployment process, see the [How Applications Are Staged](../../concepts/how-applications-are-staged.html) and [Application Container Lifecycle](app-lifecycle.html) topics.

####<a id='droplet'></a>Definition

A droplet is a tarball that includes: 

* stack
* [buildpack](../../buildpacks/index.html)
* application source code

The Diego [cell](../../concepts/architecture/index.html#diego-cell) unpacks, compiles, and runs a droplet on a container.

###<a id="preparing"></a>Prepare Your Application for Cloud Foundry

Follow the steps in the table below to prepare your application for Cloud Foundry.

<table>
	<tr>
		<th>Step</th>
		<th>Action</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Review the <a href="./prepare-to-deploy.html">Considerations for Designing and Running an Application in the Cloud</a> topic to ensure your application is <a href="./prepare-to-deploy.html#app-design">cloud-ready</a> and that you are <a href="prepare-to-deploy.html#exclude">excluding</a> unnecessary files from your deployment.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Consult the list of <a href="../..buildpacks/index.html#system-buildpacks">System Buildpacks</a> in the Buildpacks topic to ensure that Cloud Foundry has a buildpack that supports your application's language or framework.
			<p class="note"><strong>Note</strong>: If you do not want to use a system buildpack to stage your application, retrieve the URL of the externally available buildpack you want to use. For example, <code>git://github.com/johndoe/my-buildpack.git</code>.</p>
	</tr>
	<tr>
		<td>3</td>
		<td>Create instances of every service that your application needs to run successfully. For more information, see the <a href="../services/managing-services.html">Managing Service Instances with the CLI</a> topic.
		<p class="note"><strong>Note</strong>: You must create your service instances in the same space as your application.</p>
		</td>
	</tr>
</table>

###<a id="retrieve-creds"></a>Retrieve Your Credentials and Endpoint

Follow the steps in the table below to retrieve the credentials and endpoint needed to deploy your application to Cloud Foundry.

<table>
	<tr>
		<th>Step</th>
		<th>Action</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Retrieve the <%=vars.api_endpoint%>.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Retrieve the username and password for your Cloud Foundry instance.</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Determine the org and space where you want to deploy your application. For more information about orgs and spaces, see the <a href="../../concepts/roles.html">Orgs, Spaces, Roles, and Permissions</a> topic.</td>
		<p class="note"><strong>Note</strong>: You must deploy your application in the same space as any service instances required by the application.</p>
	</tr>
</table>


##<a id='configure'></a>Configure Your Deployment Options

###<a id="deployment-options"></a>Understand Your Deployment Options

The following table describes the deployment options for your Cloud Foundry application.

<table>
	<tr>
		<th>Option</th>
		<th>Definition</th>
	</tr>
	<tr>
		<td>Name</td>
		<td>This is a series of alpha-numeric characters, without spaces, to define your application within Cloud Foundry.</td>
	</tr>
	<tr>
		<td>Instances</td>
		<td>The more instances of the application you run, the less downtime it will experience. 
			<p class="note"><strong>Note</strong>: For a development application, run a single instance to simplify troubleshooting. For a production application, use a minimum of two instances.</p>
		</td>
	</tr>
	<tr>
		<td>Memory Limit</td>
		<td>The maximum amount of memory that each instance of your app can consume. If an instance exceeds this limit, Cloud Foundry restarts the instance.
	    <p class='note'><strong>Note</strong>: Initially, Cloud Foundry immediately
		restarts any instances that exceed the memory limit. If an instance
		repeatedly exceeds the memory limit in a short period of time, Cloud Foundry
		delays restarting the instance.</p></td>
	</tr>
	<tr>
		<td>Start Command</td>
		<td>This is the command that Cloud Foundry uses to start each instance of your application. The start command can be the default for a language or framework, or specified by the developer.</td>
	</tr>
	<tr>
		<td>Route and Domain</td>
		<td>
		A route is the address of an application in Cloud Foundry. Developers map an application to a route, and Cloud Foundry routes requests to the application using its route.
		<br>
		A route consists of:
		<ul>
		<li> a hostname</li>
		<li> a domain</li>
		</ul>
		The diagram below illustrates an example route.<br>

		<%= image_tag('routedomain.png') %><br>

		In this example, Cloud Foundry forwards requests to the URL <code>http://myapp.shared-domain.example.com</code> to the application at the route <code>myapp.shared-domain.example.com</code>.<br><br>

		For more information about how your application uses routes and domains, see the <a href="#considerations-route">Considerations for Routes and Domains</a> section below.<br>
		</td>
	</tr>
	<tr>
		<td>Pre-runtime Hooks</td>
		<td>A pre-runtime hook is a task that Cloud Foundry executes immediately before each instance of an application starts. To configure pre-runtime hooks, see the <a href="#config-hook">Configure Pre-runtime Hooks</a> section below.</td>
	</tr>
</table>

### <a id='defining-options'></a>Define Deployment Options ###

You can define deployment options on the command line using the [Cloud Foundry Command Line Interface](../../cf-cli/index.html) (cf CLI) when you [push](#push) the application, in a manifest file, or both together. See the [Deploying with Application Manifests](./manifest.html) topic for instructions on how to define deployment options.

If configuring routes and domains, consult the [Considerations for Routes and Domains](#considerations-route) section below.

####<a id='considerations-route'></a>Considerations for Routes and Domains

Keep in mind the following considerations when configuring routes and domains for your Cloud Foundry application:

* By default, Cloud Foundry sets the hostname as the name of the application, but developers can specify a custom hostname. 
* Your application route must be globally unique from other routes hosted by <%=vars.product_short%>. The deployment fails unless the application has a globally unique route.
* Cloud Foundry deploys every application to a space that belongs to a domain.
* Every Cloud Foundry instance has a default domain defined. Developers can specify a custom domain when deploying, but the domain must be registered and mapped to the org that contains the target application space.
* Cloud Foundry ​allows​ application names, but not application URLs, to include underscores. Cloud Foundry converts underscores to hyphens when setting a default application URL from an application name.

<%=vars.ssl%>

For more information about routes and domains in Cloud Foundry, see the <a href="./routes-domains.html">Routes and Domains</a> topic.

###<a id="config-hook"></a>Configure Pre-runtime Hooks

Developers use pre-runtime hooks to perform application-specific initialization tasks, such as setting custom environment variables. 

####<a id='def-env'></a>Definition 

Environment variables are key-value pairs defined at the operating system level. These key-value pairs provide a way to configure the applications running on a system. For example, any application can access the <code>LANG</code> environment variable to determine which language to use for error messages and instructions, collating sequences, and date formats.

####<a id='how-to-config-hooks'></a>How To Configure Pre-runtime Hooks 

Follow the steps in the table below to configure pre-runtime hooks for your application:

<table>
	<tr>
		<th>Step</th>
		<th>Action</th>
		<th>Explanation</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Create a file named <code>.profile</code> and place it in the root of your application directory.<td>If the directory includes a <code>.profile</code> file, then Cloud Foundry executes it immediately before each instance of your app starts.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>Enter bash commands into your <code>.profile</code> file to perform any required pre-initialization tasks for your application, particularly those concerning environment variables.</td>
		<td>Because the <code>.profile</code> script executes after the buildpack, the script has access to the language runtime environment created by the buildpack. See the <a href="#example-hook">example</a> below.</td>
</table> 

<p class="note"><strong>Note</strong>: Your application root directory may also include a <code>.profile.d</code> directory that contains bash scripts that perform initialization tasks for the buildpack. 
Developers should not edit these scripts unless they are using a <a href="../../buildpacks/custom.html">custom buildpack</a>.</p>

####<a id='hooks-limits'></a>Limitations

Pre-runtime hooks have the following limitations:

* The Java buildpack does not support pre-runtime hooks.
* If you are using a PHP buildpack version prior to v4.3.18, the buildpack does not execute your PHP app's <code>.profile</code> script. Your PHP app will host the <code>.profile</code> script's contents. This means that any PHP app staged using the affected PHP Buildpack versions can leak credentials placed in the <code>.profile</code> script.</p>

####<a id='example-hook'></a>Example

The following example <code>.profile</code> file sets the <code>LANG</code> environment variable for an application.

~~~bash
# Set the default LANG for your application
export LANG=en_US.UTF-8
~~~

##<a id='deploy'></a>Deploy Your Application

###<a id='target-login'></a>Step 1: Target and Log In

Use the cf CLI to target and log in to your Cloud Foundry instance with the credentials and endpoint you retrieved in the <a href="#retrieve-creds">Retrieve Your Credentials and Endpoint</a> section.
 
For more information, see the [Getting Started with the cf CLI](https://docs.cloudfoundry.org/cf-cli/getting-started.html#login) topic.

###<a id='push'></a>Step 2: Push Your Application

Once you are logged in and have targeted the space where you want to deploy your application, push your application from the root of your application directory:

<pre class="terminal">$ cf push APP-NAME</pre> 

You can specify your deployment options as part of the `cf push` command or as part of your application manifest. For more information, see the [Deploying with Application Manifests](./manifest.html) topic. 

If you do not specify deployment options, Cloud Foundry sets the number of instances, the amount of memory, and other attributes of your app to the default values. See the [example](#example-push) below for more information about how Cloud Foundry assigns default values.

If your application fails to deploy, see the [Troubleshooting Application Deployment and Health](troubleshoot-app-health.html) topic.

####<a id='example-push'></a>Example Push

The following example illustrates how Cloud Foundry assigns default values to an application when the developer specifies no deployment options:

<pre class="terminal">
$ cf push my-app
Creating app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
OK

Creating route my-app.<%=vars.app_domain%>...
OK

Binding my-app.<%=vars.app_domain%> to my-app...
OK

Uploading my-app...
Uploading app: 560.1K, 9 files
OK

Starting app my-app in org example-org / space development as a.user@<%= vars.app_domain %>...
-----> Downloaded app package (552K)
OK
-----> Using Ruby version: ruby-1.9.3
-----> Installing dependencies using Bundler version 1.3.2
       Running: bundle install --without development:test --path
         vendor/bundle --binstubs vendor/bundle/bin --deployment
       Installing rack (1.5.1)
       Installing rack-protection (1.3.2)
       Installing tilt (1.3.3)
       Installing sinatra (1.3.4)
       Using bundler (1.3.2)
       Updating files in vendor/cache
       Your bundle is complete! It was installed into ./vendor/bundle
       Cleaning up the bundler cache.
-----> Uploading droplet (23M)

1 of 1 instances running

App started

Showing health and status for app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
OK

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: my-app.<%=vars.app_domain%>

     state     since                    cpu    memory        disk
#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G
</pre>

####<a id='potential-downtime'></a>Potential Downtime and Duplication

When you deploy an application while it is running, Cloud Foundry stops all instances of that application and then deploys. Users who try to run the application receive a "404 not found" message while `cf push` runs.

Stopping all instances is necessary to prevent two versions of your code from running at the same time.
A worst-case example would be deploying an update that involved a database
schema migration, because instances running the old code would not work and
users could lose data.

### <a id='service-config'></a>Step 3: Bind and Configure Services

If you created service instances for use by your application, you must bind your service instances to your application. For more information about how to bind service instances, see [Managing Service Instances with the CLI](services/managing-services.html#bind).

If you bound a service to the application that you deployed, you may need to configure your application with the service URL and credentials. For more information, see the specific documentation for your application
framework:

* [Ruby](../../buildpacks/ruby/ruby-service-bindings.html)
* [Node.js](../../buildpacks/node/node-service-bindings.html)
* [Spring](../../buildpacks/java/spring-service-bindings.html)
* [Grails](../../buildpacks/java/grails-service-bindings.html)